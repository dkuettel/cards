
- split data and code, make code public git
- for latex see https://katex.org/docs/supported.html

todo:
x make state diff more explicit, now I have a change and I'm not sure where
x how can I run it against a test env, test deck? or complete test env? before I break something with adding images
    x use a test config with a test base path and just one thing in there?
    x a test deck and easy to manually delete everything in the end
o finally add images and other media stuff
    - also preview needs to be able to work with test-config. test-config is a global --test switch? or maybe preview doesnt care
        x nice preview already works with image embedded
    - folder rich, with content.md, mochi.json, and a media folder, as required by mochi with @media, for attachments
    - is the mochi syntax the same as the real markdown, so I can preview locally
        - sadly, the @media/something doesnt work in normal markdown, is it really needed on mochi side?
        - oh wait, we can use a folder named "@media" on linux, so it's unified, but if we have to rename things anyway, it doesnt matter much
    - all concrete pandoc parse elements are list-like
        - so can we generically match on them, and on Image, to get all?
        - and how to transform here, just recursively? functionally?
    - how do we know if something changed
        - before the full state was right there to compare
        - now I would need the binary data as well, or is there a hash? I guess not :/
        - so it will be hard to know if the image has changed
        - plus the api doc is wrong, the regex cant be true, maybe talk to dev, then also ask about paging, and image changes
        - probably should check what we get back when we retrieve a card, full data, including image? then things are fine for now
        - but need to produce stable names, or wait, we just allow nice names only? uuh or we hash into a name, then we also notice changes
            - i want local names to be free and descriptive still
    - in the new rich format, try to do less markdown kungfu, data separated
        - how to separate reverseness and prompt stuff? literally say "prompt: ..."? still though requires parsing
        - instead have a reverse.flag in folder, or a reverse symlink? or reverse.prompt? prompt.md and reverse-prompt.md?
        - or prompts.md with two and --- between? requires parsing again; we want the prompt to be easy, single line, maybe not .md
    - I implemented much now with lazyness, but that can mean some stuff might get done more than once
        - stick with it? or maybe cached prop, or just load? not sure what is easier
        - but basically it means much redundant data, which makes things look more complicated for sure
        - cached prop or function isnt a bad idea then, just beware in case we do want to reload from disk ...
o how to deal with the mochi api class card
    - there we need id, it's part of it (right?)
    - but at the same time, we often need a data structure that represent a full card, likely in mochi format
        - but we might not have an id then, optional could be done, but feels like we might have to write a lot of if code?
- backup? what if I make a mistake, content is never gone, but mochi review history is not yet backed up
- really need to separate data and code, telescop files finds too much, or control that?
- do some profiling, it's surprisingly slow, maybe rust could be fun after all, if easy way to handle markdown data
    - from a quick profile run, it looks like pandoc is just not very fast, at least with the bindings here
- maybe see for dependency updates
- switch to typer?
- if we ever want our own ids, and mochi doesnt provide, we could use comment or invisible markdown to carry this, if it exists?
    - like the media/image names could carry a hash to detect changes and/or refer to ids

design:
- create card gives an id, we cannot control it
- how do we sync things correctly then? we record the id, change our documents?
- or we add an additional field unused for displaying and control the id ourselves?
- either way, I want to edit my notes and I dont want to create ids, or maybe not even see them (?)
- but we kinda need it with the text, so it moves as I move things
- we cannot currently control the events stuff, so we cannot lose and re-introduce a card without losing history
    - btw, need to make regular backups eventually
- whats a good format for me locally then
    - yaml with long text? not so much formatting then
    - one use case is just a list of random things, like the ones exported from brainscape for now
        - do I want to use decks? do I map them to folders maybe?
        - a .json file or so per folder to identify the deck for mochi
        - pretty much just directly the mochi-style content, with markup style
        - and the id is in a parallel json file? or added to the first line, and then stripped?
        - how to deal with other content, files like images? in a parallel .files folder?
        - useful if relatively shaped so that it also works with a markdown viewer locally
    - or we overall just go with markdowns? could even have the "long texts" there for reading?
        - for direct cards seems fine really, just the question is how to track the id
        - the online editor is quite nice, should I really manage it locally and sync?
        - actually the editor is not special, the rendered view is disconnected
- do I need content when a card has a template?!
o how to make sure sync information stays with the source of truth?
    - in the file would be most safe
    - a similar .file or something could get lost
    - or a card is a folder, then you move whole folders, but seems a bit heavy?
    - make it part of markdown somehow, plus allow the same substructure when doing larger documents?
o how to handle the full documents and connected cards?
    - generally write a document, as I used to, for my own reading
    - intersperse cards somehow, and/or subfolder with related things
    - could there be a way for us to not repeat ourselves? like mark pieces as cards and keep it as text anyway?
    - whatever we do inline, it has to be full markdown again, right? ok we dont necessarily need the full power again
        - a bit difficult because it uses pages, and that's pretty high level, not very nestable
    - maybe only support certain templates as interspersed with some proprietary syntax?
        - still annoying that I have to do the parsing, and keep track of the card ids then
        - use '->' and it becomes '-{id}>' when synced?
    - something that literally links to the restapi cards/id thing would be nicely consistent, and new ones I dont add the id stuff yet?
    - just need to mark start and end, and maybe allow different things
        - the full thing
        - but also just a templated one, q and a?
    - given mochi is markdown, I just dont want to get away from it too far, so
        - how to expose easy templates
        - how to embed a card
        - do we need both, or do something in separate files?
o see
    - https://www.markdownguide.org/cheat-sheet/
    - https://markdownlivepreview.com/
    - https://mochi.cards/docs/api/#create-a-card
    - https://pandoc.org/
